import{_ as e,c as t,o as a,U as o}from"./chunks/framework.on6qGByC.js";const _=JSON.parse('{"title":"SVG Graphane Object","description":"","frontmatter":{},"headers":[],"relativePath":"reference/svg/lib/index.md","filePath":"reference/svg/lib/index.md"}'),n={name:"reference/svg/lib/index.md"},c=o('<h1 id="svg-graphane-object" tabindex="-1">SVG Graphane Object <a class="header-anchor" href="#svg-graphane-object" aria-label="Permalink to &quot;SVG Graphane Object&quot;">â€‹</a></h1><p><strong>Graphane</strong> includes a powerful API to simplify the construction and manipulation of SVG graphics from Javascript. The API is very close to the SVG structure.</p><p>You can access the SVG with the Graphane API from the methods included in the component with:</p><ul><li><code>$. $.svg</code>.</li></ul><p>You can also access it from outside the component with:</p><ul><li><code>&lt;component&gt;.svg</code></li></ul><p>In Graphane SVG wrapper, all are methods; thus, when you want to work with SVG attributes or properties, you must use methods. For example, set an <code>id</code> to an SVG element is <code>element.id(&#39;unique_id&#39;)</code> and for getting this identification it is necessary to use <code>element.id()</code>.</p><p>Graphane dynamically constructs the methods, which can chain together to make successive calls. Each call returns the original object and can include one call after another.</p>',8),r=[c];function s(i,d,h,l,p,u){return a(),t("div",null,r)}const f=e(n,[["render",s]]);export{_ as __pageData,f as default};
