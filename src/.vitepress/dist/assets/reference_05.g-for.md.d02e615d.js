import{_ as e,o as t,c as a,V as o}from"./chunks/framework.98960eec.js";const h=JSON.parse('{"title":"g-for directive","description":"","frontmatter":{},"headers":[],"relativePath":"reference/05.g-for.md","filePath":"reference/05.g-for.md"}'),s={name:"reference/05.g-for.md"},n=o(`<h1 id="g-for-directive" tabindex="-1">g-for directive <a class="header-anchor" href="#g-for-directive" aria-label="Permalink to &quot;g-for directive&quot;">â€‹</a></h1><p>The <code>g-for</code> directive is a powerful feature in Graphane that allows you to render a block of SVG elements multiple times based on an array or an object&#39;s properties. It provides a convenient way to iterate over data and dynamically generate content in your Graphane templates.</p><p>The basic syntax for <code>g-for</code> is as follows:</p><div class="language-svg"><button title="Copy Code" class="copy"></button><span class="lang">svg</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;defs v-for=&quot;item in items&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;circle :x=&quot;item.x&quot; :y=&quot;item.y&quot;&gt;&lt;/circle&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/defs&gt;</span></span></code></pre></div><p>Here&#39;s a breakdown of the different parts of the <code>g-for</code> directive:</p><p><code>g-for=&quot;item in items&quot;</code>: This is the main part of the directive. It specifies the iteration and defines a variable (<code>item</code> in this case) to represent each item in the array or object being iterated over (<code>items</code> in this case).</p><p>You can also access the index of the current iteration by using an optional second parameter in the <code>g-for</code> syntax:</p><div class="language-svg"><button title="Copy Code" class="copy"></button><span class="lang">svg</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;defs v-for=&quot;(item, index) in items&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;circle :id=&quot;&#39;circle&#39; + index&quot; :x=&quot;item.x&quot; :y=&quot;item.y&quot;&gt;&lt;/circle&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/defs&gt;</span></span></code></pre></div><p>Additionally, <code>g-for</code> supports a few extra features such as iteration over a range of numbers and using an alias for the index:</p><div class="language-svg"><button title="Copy Code" class="copy"></button><span class="lang">svg</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;defs v-for=&quot;n in 10&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;circle :id=&quot;&#39;circle&#39; + n&quot; :x=&quot;n * 10&quot; :y=&quot;n * 10&quot; r=&quot;5&quot;&gt;&lt;/circle&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/defs&gt;</span></span></code></pre></div><p>This example will render 10 circle elements.</p><p>Overall, the <code>g-for</code> directive is a versatile and powerful tool in Graphane that allows you to iterate over data and dynamically render content based on that data. It provides flexibility and control over how your templates generate SVG content, making it easier to build dynamic graphs.</p>`,12),i=[n];function r(l,c,p,d,u,f){return t(),a("div",null,i)}const m=e(s,[["render",r]]);export{h as __pageData,m as default};
