import{_ as a,c as e,o as t,U as s}from"./chunks/framework.on6qGByC.js";const k=JSON.parse('{"title":"animateTransform","description":"","frontmatter":{},"headers":[],"relativePath":"reference/svg/lib/animateTransform.md","filePath":"reference/svg/lib/animateTransform.md"}'),i={name:"reference/svg/lib/animateTransform.md"},n=s('<h1 id="animatetransform" tabindex="-1">animateTransform <a class="header-anchor" href="#animatetransform" aria-label="Permalink to &quot;animateTransform&quot;">​</a></h1><p>The <code>animateTransform</code> element animates a transformation attribute on its target element, thereby allowing animations to control translation, scaling, rotation, and/or skewing.</p><p>Usually, this element is created with:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> animateTransform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parentElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;animateTransform&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>It&#39;s possible to create it as a disconnected element with <code>gSVG(&#39;animateTransform&#39;)</code> and attach it to the SVG document with <code>.attachTo()</code>.</p><p><em>More info</em>: <a href="https://developer.mozilla.org//en-US/docs/Web/SVG/Element/animateTransform" target="_blank" rel="noreferrer">mdn</a> | <a href="https://svgwg.org/specs/animations/#AnimateTransformElement" target="_blank" rel="noreferrer">w3c</a></p><h2 id="type" tabindex="-1">.type() <a class="header-anchor" href="#type" aria-label="Permalink to &quot;.type()&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animateTransform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( transformationType )</span></span></code></pre></div><p>Set the <code>type</code> attribute. It defines the type of transformation, whose values change over time.</p><ul><li><p><strong>argument</strong>: <code>{string} transformationType</code> Must be &#39;translate&#39; | &#39;scale&#39; | &#39;rotate&#39; | &#39;skewX&#39; | &#39;skewY&#39;</p></li><li><p><strong>returns</strong>: <code>{gSVGObject}</code> The original object</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Get the <code>type</code> current value.</p><ul><li><p><strong>returns</strong>: <code>{string}</code> Current transformation type</p></li><li><p><strong>Parent elements</strong>: <a href="./a.html">a</a> | <a href="./circle.html">circle</a> | <a href="./clipPath.html">clipPath</a> | <a href="./defs.html">defs</a> | <a href="./ellipse.html">ellipse</a> | <a href="./FilterPrimitives.html#feImage.md">feImage</a> | <a href="./g.html">g</a> | <a href="./image.html">image</a> | <a href="./line.html">line</a> | <a href="./linearGradient.html">linearGradient</a> | <a href="./marker.html">marker</a> | <a href="./mask.html">mask</a> | <a href="./path.html">path</a> | <a href="./pattern.html">pattern</a> | <a href="./polygon.html">polygon</a> | <a href="./polyline.html">polyline</a> | <a href="./radialGradient.html">radialGradient</a> | <a href="./rect.html">rect</a> | <a href="./svg.html">svg</a> | <a href="./switch.html">switch</a> | <a href="./symbol.html">symbol</a> | <a href="./text.html">text</a> | <a href="./use.html">use</a>.</p></li><li><p><strong>Child elements</strong>: <a href="./desc.html">desc</a> | <a href="./metadata.html">metadata</a> | <a href="./title.html">title</a>.</p></li></ul>',13),r=[n];function l(h,o,p,m,d,c){return t(),e("div",null,r)}const f=a(i,[["render",l]]);export{k as __pageData,f as default};
