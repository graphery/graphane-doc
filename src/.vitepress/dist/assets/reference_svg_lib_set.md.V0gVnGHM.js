import{_ as e,c as t,o as a,U as i}from"./chunks/framework.on6qGByC.js";const g=JSON.parse('{"title":"set","description":"","frontmatter":{},"headers":[],"relativePath":"reference/svg/lib/set.md","filePath":"reference/svg/lib/set.md"}'),s={name:"reference/svg/lib/set.md"},r=i('<h1 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h1><p>The SVG <code>set</code> element provides a simple means of just setting the value of an attribute for a specified duration.</p><p>It supports all attribute types, including those that cannot reasonably be interpolated, such as string and boolean values. For attributes that can be reasonably be interpolated, the <code>animate</code> is usualy prefered.</p><p>Note: The <code>set</code> element is non-additive. The additive and accumulate attributes are not allowed, and will be ignored if specified.</p><p>Usually, this element is created with:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parentElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>It&#39;s possible to create it as a disconnected element with <code>gSVG(&#39;set&#39;)</code> and attach it to the SVG document with <code>.attachTo()</code>.</p><p><em>More info</em>: <a href="https://developer.mozilla.org//en-US/docs/Web/SVG/Element/set" target="_blank" rel="noreferrer">mdn</a> | <a href="https://svgwg.org/specs/animations/#SetElement" target="_blank" rel="noreferrer">w3c</a></p><h2 id="to" tabindex="-1">.to() <a class="header-anchor" href="#to" aria-label="Permalink to &quot;.to()&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( value )</span></span></code></pre></div><p>Set this attribute defines the value to be applied to the target attribute for the duration of the animation. The value must match the requirements of the target attribute.</p><ul><li><p><strong>argument</strong>: <code>{number|string} value</code> the value for the attribute during the duration of the element</p></li><li><p><strong>returns</strong>: <code>{gSVGObject}</code> The original object</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Get the <code>to</code> current value.</p><ul><li><p><strong>returns</strong>: <code>{number|string}</code></p></li><li><p><strong>Parent elements</strong>: <a href="./a.html">a</a> | <a href="./circle.html">circle</a> | <a href="./clipPath.html">clipPath</a> | <a href="./defs.html">defs</a> | <a href="./ellipse.html">ellipse</a> | <a href="./FilterPrimitives.html#feBlend.md">feBlend</a> | <a href="./FilterPrimitives.html#feColorMatrix.md">feColorMatrix</a> | <a href="./FilterPrimitives.html#feComposite.md">feComposite</a> | <a href="./FilterPrimitives.html#feConvolveMatrix.md">feConvolveMatrix</a> | <a href="./FilterPrimitives.html#feDisplacementMap.md">feDisplacementMap</a> | <a href="./FilterPrimitives.html#feDistantLight.md">feDistantLight</a> | <a href="./FilterPrimitives.html#feDropShadow.md">feDropShadow</a> | <a href="./FilterPrimitives.html#feFlood.md">feFlood</a> | <a href="./FilterPrimitives.html#feFuncA.md">feFuncA</a> | <a href="./FilterPrimitives.html#feFuncB.md">feFuncB</a> | <a href="./FilterPrimitives.html#feFuncG.md">feFuncG</a> | <a href="./FilterPrimitives.html#feFuncR.md">feFuncR</a> | <a href="./FilterPrimitives.html#feGaussianBlur.md">feGaussianBlur</a> | <a href="./FilterPrimitives.html#feImage.md">feImage</a> | <a href="./FilterPrimitives.html#feMergeNode.md">feMergeNode</a> | <a href="./FilterPrimitives.html#feMorphology.md">feMorphology</a> | <a href="./FilterPrimitives.html#feOffset.md">feOffset</a> | <a href="./FilterPrimitives.html#fePointLight.md">fePointLight</a> | <a href="./FilterPrimitives.html#feSpotLight.md">feSpotLight</a> | <a href="./FilterPrimitives.html#feTile.md">feTile</a> | <a href="./FilterPrimitives.html#feTurbulence.md">feTurbulence</a> | <a href="./filter.html">filter</a> | <a href="./g.html">g</a> | <a href="./image.html">image</a> | <a href="./line.html">line</a> | <a href="./linearGradient.html">linearGradient</a> | <a href="./marker.html">marker</a> | <a href="./mask.html">mask</a> | <a href="./path.html">path</a> | <a href="./pattern.html">pattern</a> | <a href="./polygon.html">polygon</a> | <a href="./polyline.html">polyline</a> | <a href="./radialGradient.html">radialGradient</a> | <a href="./rect.html">rect</a> | <a href="./stop.html">stop</a> | <a href="./svg.html">svg</a> | <a href="./switch.html">switch</a> | <a href="./symbol.html">symbol</a> | <a href="./text.html">text</a> | <a href="./textPath.html">textPath</a> | <a href="./tspan.html">tspan</a> | <a href="./use.html">use</a>.</p></li><li><p><strong>Child elements</strong>: <a href="./desc.html">desc</a> | <a href="./metadata.html">metadata</a> | <a href="./title.html">title</a>.</p></li></ul>',15),l=[r];function h(n,o,m,d,p,f){return a(),t("div",null,l)}const u=e(s,[["render",h]]);export{g as __pageData,u as default};
