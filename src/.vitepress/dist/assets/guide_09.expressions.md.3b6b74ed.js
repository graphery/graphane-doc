import{_ as s,o as a,c as o,V as n}from"./chunks/framework.98960eec.js";const u=JSON.parse('{"title":"Evaluation of expressions in directives","description":"","frontmatter":{},"headers":[],"relativePath":"guide/09.expressions.md","filePath":"guide/09.expressions.md"}'),e={name:"guide/09.expressions.md"},l=n(`<h1 id="evaluation-of-expressions-in-directives" tabindex="-1">Evaluation of expressions in directives <a class="header-anchor" href="#evaluation-of-expressions-in-directives" aria-label="Permalink to &quot;Evaluation of expressions in directives&quot;">​</a></h1><p>In Graphane, you can use different types of JavaScript expressions within directives to achieve various functionalities. Here are the commonly used JavaScript expressions in directives:</p><h2 id="simple-data-binding" tabindex="-1">Simple Data Binding <a class="header-anchor" href="#simple-data-binding" aria-label="Permalink to &quot;Simple Data Binding&quot;">​</a></h2><p>With simple data binding, you can use some value of a <code>data</code> property in the SVG template.</p><p>With simple data binding, you can use the value of a data property in the SVG template. For example, with <code>g-bind</code> or using the shorthand colon notation (<code>:</code>), you can bind the property value to SVG elements.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:fill</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value.color</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">cx</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">50</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">cy</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">50</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">25</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="conditional-expression" tabindex="-1">Conditional expression <a class="header-anchor" href="#conditional-expression" aria-label="Permalink to &quot;Conditional expression&quot;">​</a></h2><p>You can use conditional expressions to conditionally render SVG elements based on certain conditions. In Graphane, you can use the ternary operator condition <code>? ok : ko</code> or the boolean operators <code>&amp;&amp;</code> and <code>||</code> to define conditional expressions. For example:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:fill</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value.regular ? &#39;green&#39; : &#39;red&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">cx</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">50</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">cy</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">50</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">25</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="destructuring-in-g-for" tabindex="-1">Destructuring in <code>g-for</code> <a class="header-anchor" href="#destructuring-in-g-for" aria-label="Permalink to &quot;Destructuring in \`g-for\`&quot;">​</a></h2><p>In Graphane, you can use the <code>g-for</code> directive to loop over an array and generate SVG elements dynamically. With JavaScript destructuring, you can extract specific values from the array elements and use them within the SVG elements.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">g</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">g-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">({ x, y }) of points</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:cx</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:cy</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">g</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="calling-functions" tabindex="-1">Calling Functions <a class="header-anchor" href="#calling-functions" aria-label="Permalink to &quot;Calling Functions&quot;">​</a></h2><p>You can use functions into the expressions. The function return must be used as value for directives</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">g</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">g-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">point of data.points()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:cx</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">point.x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:cy</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">point.y</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">g</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="restricted-access" tabindex="-1">Restricted Access <a class="header-anchor" href="#restricted-access" aria-label="Permalink to &quot;Restricted  Access&quot;">​</a></h2><p>In Graphane, template expressions are <em>sandboxed</em> and have limited access. They can only access the <code>data</code> object and some commonly used built-in global objects such as <code>Math</code> and <code>Date</code>. This restricted access ensures a secure and predictable environment for evaluating expressions within the SVG document.</p>`,17),t=[l];function p(c,r,i,D,F,y){return a(),o("div",null,t)}const h=s(e,[["render",p]]);export{u as __pageData,h as default};
