import{_ as a,c as n,o as t,m as s,a as i,U as e}from"./chunks/framework.on6qGByC.js";const _=JSON.parse('{"title":"fractal tree","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"examples/fractal-tree.md","filePath":"examples/fractal-tree.md"}'),l={name:"examples/fractal-tree.md"},h=s("h1",{id:"fractal-tree",tabindex:"-1"},[i("fractal tree "),s("a",{class:"header-anchor",href:"#fractal-tree","aria-label":'Permalink to "fractal tree"'},"â€‹")],-1),p=s("p",null,[i("This fractal tree is built entirely with the Graphane library, and it is animated with the "),s("code",null,"sequence"),i(" plugin.")],-1),k=s("g-composer",null,[s("svg",{viewBox:"0 0 600 600",width:"400",height:"400","g-on:load":"init"}),s("g-script",{type:"plugin",src:"http://localhost:63342/graphane//lib/plugins/gsvg.sequence.js"}),s("g-script",{type:"plugin",src:"http://localhost:63342/graphane//lib/plugins/gsvg.shapes.js"}),s("g-script",{type:"methods"}," function init() { const svg = $.svg; const gSVG = svg.gSVG; const seq = svg.Seq(); (function drawBranch (startX = 300, startY = 600, len = 120, angle = 0, remain = 10, delay = 0) { const duration = 600; const {x: endX, y: endY} = gSVG.polar2cartesian(startX, startY, len, angle); const element = svg.add('line') .x1(startX).y1(startY).x2(startX).y2(startY) .stroke('#45ae13ff').stroke_width(remain); seq.add(element, {x2: endX, y2: endY}, {delay, duration}); if (remain) { drawBranch(endX, endY, len * 0.8, angle - 16, remain - 1, delay + duration); drawBranch(endX, endY, len * 0.8, angle + 16, remain - 1, delay + duration); } })(); setTimeout(() => seq.play(), 1000); } ")],-1),E=e("",1),r=[h,p,k,E];function d(g,c,o,y,u,m){return t(),n("div",null,r)}const f=a(l,[["render",d]]);export{_ as __pageData,f as default};
