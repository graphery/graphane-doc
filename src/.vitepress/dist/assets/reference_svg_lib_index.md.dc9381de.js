import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.05b02974.js";const _=JSON.parse('{"title":"SVG Wrapper","description":"","frontmatter":{},"headers":[],"relativePath":"reference/svg/lib/index.md","filePath":"reference/svg/lib/index.md"}'),n={name:"reference/svg/lib/index.md"},r=o('<h1 id="svg-wrapper" tabindex="-1">SVG Wrapper <a class="header-anchor" href="#svg-wrapper" aria-label="Permalink to &quot;SVG Wrapper&quot;">â€‹</a></h1><p><strong>Graphane</strong> includes a powerful API to simplify the construction and manipulation of SVG graphics from Javascript. The API is very close to the SVG structure.</p><p>You can access the SVG with the Graphane API from the methods included in the component with:</p><ul><li><code>$. $.svg</code>.</li></ul><p>You can also access it from outside the component with:</p><ul><li><code>&lt;component&gt;.svg</code></li></ul><p>In Graphane SVG wrapper, all are methods; thus, when you want to work with SVG attributes or properties, you must use methods. For example, set an <code>id</code> to an SVG element is <code>element.id(&#39;unique_id&#39;)</code> and for getting this identification it is necessary to use <code>element.id()</code>.</p><p>Graphane dynamically constructs the methods, which can chain together to make successive calls. Each call returns the original object and can include one call after another.</p>',8),s=[r];function c(i,d,l,p,h,u){return t(),a("div",null,s)}const f=e(n,[["render",c]]);export{_ as __pageData,f as default};
