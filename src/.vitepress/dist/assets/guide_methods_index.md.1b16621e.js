import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.05b02974.js";const _=JSON.parse('{"title":"Methods","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/methods/index.md","filePath":"guide/methods/index.md"}'),s={name:"guide/methods/index.md"},c=o('<h1 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h1><p>When the imperative model is not enough, you can use Javascript functions. The Graphane template component can be manage functions for complex algorithm, data manipulation or event handling.</p><p>You can load the method with several methods:</p><ul><li>with <code>&lt;script type=&quot;methods&quot;&gt;&lt;/script&gt;</code> with the <a href="./embebed.html">code embebed</a>.</li><li>with the <code>methods-src</code> attribute or <code>&lt;script type=&quot;methods&quot; src=&quot;resource&quot;&gt;&lt;/script&gt;</code> for <a href="./external.html">load a resource</a> with the Javascript functions.</li><li>directly with the <a href="./property.html"><code>.methods</code> property</a>.</li></ul><h2 id="restricted-access" tabindex="-1">Restricted access <a class="header-anchor" href="#restricted-access" aria-label="Permalink to &quot;Restricted access&quot;">​</a></h2><p>In Graphane template, the methods are sandboxed and have limited access to other functions or libraries. This restricted access ensures a secure and predictable environment for evaluating functions within the component. You can use global objects and functions, to made dynamic imports and use <code>$</code> for access to template component elements as <a href="./svg-access.html">$.svg</a> and <a href="./data-access.html">$.data</a>.</p>',6),r=[c];function d(i,n,h,l,m,p){return t(),a("div",null,r)}const f=e(s,[["render",d]]);export{_ as __pageData,f as default};
